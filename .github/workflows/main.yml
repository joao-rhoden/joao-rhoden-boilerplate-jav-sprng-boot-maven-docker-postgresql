name: Build and Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: "11"
          distribution: "temurin"

      - name: Print working directory and list files
        run: |
          echo "Current directory: $(pwd)"
          echo "Listing files:"
          ls -la

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build . -t ${{ secrets.DOCKER_USERNAME }}/spring-boot-boilerplate:latest

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/spring-boot-boilerplate:latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Configure Terraform Credentials
        run: |
          mkdir -p ~/.terraform.d/
          echo '{"credentials":{"app.terraform.io":{"token":"${{ secrets.TERRAFORM_TOKEN }}"}}}' > ~/.terraform.d/credentials.tfrc.json

      - name: Terraform Apply
        id: apply
        env:
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
        run: |
          cd ./infra
          terraform init
          terraform plan -var "db_name=${{ secrets.DB_NAME }}" -var "db_username=${{ secrets.DB_USERNAME }}" -var "db_password=${{ secrets.DB_PASSWORD }}" -var "ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}"
          terraform apply -auto-approve -var "db_name=${{ secrets.DB_NAME }}" -var "db_username=${{ secrets.DB_USERNAME }}" -var "db_password=${{ secrets.DB_PASSWORD }}" -var "ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}"

      - name: Deploy to EC2
        run: |
          ec2_ip=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=App Server" --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          scp -o StrictHostKeyChecking=no -i private_key.pem target/*.jar ec2-user@$ec2_ip:/path/to/your/project/
          ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@$ec2_ip << 'EOF'
            cd /path/to/your/project/
            docker-compose up -d
          EOF
